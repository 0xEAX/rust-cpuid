var searchIndex = {};
searchIndex['raw_cpuid'] = {"items":[[0,"","raw_cpuid","",null,null],[3,"CpuId","","",null,null],[3,"CpuIdResult","","",null,null],[12,"eax","","",0,null],[12,"ebx","","",0,null],[12,"ecx","","",0,null],[12,"edx","","",0,null],[3,"VendorInfo","","",null,null],[3,"CacheInfoIter","","",null,null],[3,"CacheInfo","","",null,null],[12,"num","","",1,null],[12,"typ","","",1,null],[12,"desc","","",1,null],[3,"ProcessorSerial","","",null,null],[3,"FeatureInfo","","",null,null],[3,"FeatureInfoEcx","","",null,null],[3,"FeatureInfoEdx","","",null,null],[3,"CacheParametersIter","","",null,null],[3,"CacheParameter","","",null,null],[3,"MonitorMwaitInfo","","",null,null],[3,"ThermalPowerInfo","","",null,null],[3,"ThermalPowerFeaturesEax","","",null,null],[3,"ThermalPowerFeaturesEcx","","",null,null],[3,"ExtendedFeatures","","",null,null],[3,"ExtendedFeaturesEbx","","",null,null],[3,"DirectCacheAccessInfo","","",null,null],[3,"PerformanceMonitoringInfo","","",null,null],[3,"PerformanceMonitoringFeaturesEbx","","",null,null],[3,"ExtendedTopologyIter","","",null,null],[3,"ExtendedTopologyLevel","","",null,null],[3,"ExtendedStateInfo","","",null,null],[3,"ExtendedStateIter","","",null,null],[3,"ExtendedState","","",null,null],[12,"ident","","",2,null],[3,"QoSInfo","","",null,null],[3,"ExtendedFunctionInfo","","",null,null],[3,"ExtendedFunctionInfoEcx","","",null,null],[3,"ExtendedFunctionInfoEdx","","",null,null],[4,"CacheInfoType","","",null,null],[13,"GENERAL","","",3,null],[13,"CACHE","","",3,null],[13,"TLB","","",3,null],[13,"STLB","","",3,null],[13,"DTLB","","",3,null],[13,"PREFETCH","","",3,null],[4,"CacheType","","",null,null],[13,"NULL","","Null - No more caches",4,null],[13,"DATA","","",4,null],[13,"INSTRUCTION","","",4,null],[13,"UNIFIED","","",4,null],[13,"RESERVED","","4-31 = Reserved",4,null],[4,"TopologyType","","",null,null],[13,"INVALID","","",5,null],[13,"SMT","","",5,null],[13,"CORE","","",5,null],[4,"ExtendedStateIdent","","",null,null],[13,"LegacyX87","","legacy x87 (Bit 00).",6,null],[13,"SSE128","","128-bit SSE (Bit 01).",6,null],[13,"AVX256","","256-bit AVX (Bit 02).",6,null],[4,"L2Associativity","","",null,null],[13,"Disabled","","",7,null],[13,"DirectMapped","","",7,null],[13,"TwoWay","","",7,null],[13,"FourWay","","",7,null],[13,"EightWay","","",7,null],[13,"SixteenWay","","",7,null],[13,"FullyAssiciative","","",7,null],[13,"Unknown","","",7,null],[5,"cpuid2","","Execute CPUID instruction with eax and ecx register set.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"cpuidresult"}}],[5,"cpuid1","","Execute CPUID instruction with eax register set.",null,{"inputs":[{"name":"u32"}],"output":{"name":"cpuidresult"}}],[11,"fmt","core::num","",8,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",8,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",8,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",8,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"from_small","core::num::flt2dec::bignum","Makes a bignum from one digit.",9,{"inputs":[{"name":"big32x36"},{"name":"u32"}],"output":{"name":"big32x36"}}],[11,"from_u64","","Makes a bignum from `u64` value.",9,{"inputs":[{"name":"big32x36"},{"name":"u64"}],"output":{"name":"big32x36"}}],[11,"is_zero","","Returns true if the bignum is zero.",9,{"inputs":[{"name":"big32x36"}],"output":{"name":"bool"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",9,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"big32x36"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",9,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"big32x36"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",9,{"inputs":[{"name":"big32x36"},{"name":"u32"}],"output":{"name":"big32x36"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",9,{"inputs":[{"name":"big32x36"},{"name":"usize"}],"output":{"name":"big32x36"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",9,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",9,null],[11,"eq","","",9,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"big32x36"}],"output":{"name":"big32x36"}}],[11,"fmt","","",9,{"inputs":[{"name":"big32x36"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::flt2dec::bignum::tests","Makes a bignum from one digit.",10,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",10,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"is_zero","","Returns true if the bignum is zero.",10,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",10,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",10,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",10,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",10,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",10,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",10,null],[11,"eq","","",10,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",10,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",10,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::flt2dec::decoder","",11,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",12,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec::strategy::grisu","",13,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"fmt","core::num::flt2dec","",14,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",14,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",14,null],[11,"clone","","",15,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",15,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",15,null],[11,"fmt","","",16,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num","",17,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",18,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",18,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",19,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",20,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",21,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",22,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",22,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",22,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",23,null],[11,"get","","Dereferences the content.",23,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",23,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","core::marker","",24,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"nocopy"}],"output":{"name":"nocopy"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",25,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",25,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",26,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",26,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",27,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",28,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",29,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",30,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",30,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",30,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","raw_cpuid::std","",31,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",31,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",31,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",31,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",31,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",31,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",31,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",32,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::atomic","",33,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",34,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",35,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",36,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",37,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",33,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",33,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",33,null],[11,"swap","","Stores a value into the bool, returning the old value.",33,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",33,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",33,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",33,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",33,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",33,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",34,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",34,null],[11,"swap","","Stores a value into the isize, returning the old value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",34,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",35,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",35,null],[11,"swap","","Stores a value into the usize, returning the old value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",35,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",36,null],[11,"load","","Loads a value from the pointer.",36,null],[11,"store","","Stores a value into the pointer.",36,null],[11,"swap","","Stores a value into the pointer, returning the old value.",36,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",36,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",38,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",38,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",38,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",38,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",38,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",38,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",38,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",40,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",40,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",40,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",40,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",40,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",40,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",40,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",40,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",40,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",41,null],[11,"clone","","",41,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",42,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",42,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",42,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",42,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",43,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",43,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",44,null],[11,"deref","","",43,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",45,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",45,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",45,null],[11,"clone","core::char","",46,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",47,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",46,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",49,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",48,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",50,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",50,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"indexable","","",50,{"inputs":[{"name":"rev"}],"output":{"name":"usize"}}],[11,"idx","","",50,{"inputs":[{"name":"rev"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","","",51,{"inputs":[{"name":"minmaxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"minmaxresult"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x,y)` is returned where `x <= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",51,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",52,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"indexable","","",52,{"inputs":[{"name":"cloned"}],"output":{"name":"usize"}}],[11,"idx","","",52,{"inputs":[{"name":"cloned"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",53,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"indexable","","",53,{"inputs":[{"name":"cycle"}],"output":{"name":"usize"}}],[11,"idx","","",53,{"inputs":[{"name":"cycle"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",54,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"indexable","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"idx","","",54,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",55,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"indexable","","",55,{"inputs":[{"name":"zip"}],"output":{"name":"usize"}}],[11,"idx","","",55,{"inputs":[{"name":"zip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",56,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"indexable","","",56,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"idx","","",56,{"inputs":[{"name":"map"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",57,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",58,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",59,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"nth","","",59,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",59,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",59,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"indexable","","",59,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"idx","","",59,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",60,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",60,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",60,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",60,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",60,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",60,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",60,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",61,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",62,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",63,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",63,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",63,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",63,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",63,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"indexable","","",63,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"idx","","",63,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",64,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",64,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"indexable","","",64,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"idx","","",64,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",65,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"clone","","",66,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",66,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",67,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",67,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",67,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",67,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"indexable","","",67,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"idx","","",67,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"reset_fuse","","Resets the `Fuse` such that the next call to `.next()` or\n`.next_back()` will call the underlying iterator again even if it\npreviously returned `None`.",67,null],[11,"clone","","",68,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",68,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"indexable","","",68,{"inputs":[{"name":"inspect"}],"output":{"name":"usize"}}],[11,"idx","","",68,{"inputs":[{"name":"inspect"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",69,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",69,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"clone","","",70,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",28,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",27,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",70,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"clone","","",71,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",71,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next","core::ops","",27,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",72,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",72,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"indexable","","",72,{"inputs":[{"name":"repeat"}],"output":{"name":"usize"}}],[11,"idx","","",72,{"inputs":[{"name":"repeat"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",74,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",74,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",74,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",75,null],[11,"fmt","","",75,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",75,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",75,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",75,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",75,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",75,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",75,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",75,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",75,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",75,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",75,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",75,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",75,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",75,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",75,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",75,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",75,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",75,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",75,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",75,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",75,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",75,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",75,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",75,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",75,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",75,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",76,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",76,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",75,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",80,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",81,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",82,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",82,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",82,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",82,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",82,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",82,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",82,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",82,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",82,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",82,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",82,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",82,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",82,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",82,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",82,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",82,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",82,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",82,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",82,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",82,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",82,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",84,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",82,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",86,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",87,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",88,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",89,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",90,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",91,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",92,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",93,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",94,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",95,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",96,null],[11,"next","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"count","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",96,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"indexable","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",96,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",97,null],[11,"next","","",97,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"count","","",97,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",97,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",97,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",98,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",98,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",99,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",100,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next","","",101,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next","","",102,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next","","",103,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","","",104,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"clone","","",105,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",105,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"indexable","","",105,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"idx","","",105,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",106,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"indexable","","",106,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"idx","","",106,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",107,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",108,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",109,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",110,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",109,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",109,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",109,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",111,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",111,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",111,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",111,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",111,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",111,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",111,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",111,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",112,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",112,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",112,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",112,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",112,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",112,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",113,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",113,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",113,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",113,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",113,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",113,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",113,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",114,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",115,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",116,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",114,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",114,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",114,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",114,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",114,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",117,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",118,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",118,null],[11,"matching","","",118,null],[11,"use_early_reject","","",119,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",119,null],[11,"matching","","",119,null],[11,"eq","core::str","",120,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",120,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",121,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",121,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",121,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",122,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",123,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"clone","","",125,{"inputs":[{"name":"bytesderef"}],"output":{"name":"bytesderef"}}],[11,"call","","",125,null],[11,"call_mut","","",125,null],[11,"call_once","","",125,null],[11,"next","","",124,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",124,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",126,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",127,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",128,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",127,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",129,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",130,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",129,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",132,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",133,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",134,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",135,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",136,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",135,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",138,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",139,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",138,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",140,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"next_back","","",140,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",142,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",142,null],[11,"call_mut","","",142,null],[11,"call_once","","",142,null],[11,"next","","",141,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"next_back","","",141,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",144,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",144,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",144,null],[11,"finish","","",144,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",144,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",144,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",145,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",146,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",147,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",148,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",149,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",150,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",151,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",152,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",153,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",153,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",154,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",154,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"finish","","",155,null],[11,"entry","","Adds a new entry to the set output.",156,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",156,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",156,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",157,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",157,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",157,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",158,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",158,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",158,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",159,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",160,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",161,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",162,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",163,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",164,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",165,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",166,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",167,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",167,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",168,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",168,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",168,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",168,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",168,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",168,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",168,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",168,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",168,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",25,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",38,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"CACHE_INFO_TABLE","raw_cpuid","",null,null],[17,"CPU_FEATURE_SSE3","","/// Streaming SIMD Extensions 3 (SSE3). A value of 1 indicates the processor supports this technology.",null,null],[17,"CPU_FEATURE_PCLMULQDQ","","/// PCLMULQDQ. A value of 1 indicates the processor supports the PCLMULQDQ instruction",null,null],[17,"CPU_FEATURE_DTES64","","/// 64-bit DS Area. A value of 1 indicates the processor supports DS area using 64-bit layout",null,null],[17,"CPU_FEATURE_MONITOR","","/// MONITOR/MWAIT. A value of 1 indicates the processor supports this feature.",null,null],[17,"CPU_FEATURE_DSCPL","","/// CPL Qualified Debug Store. A value of 1 indicates the processor supports the extensions to the  Debug Store feature to allow for branch message storage qualified by CPL.",null,null],[17,"CPU_FEATURE_VMX","","/// Virtual Machine Extensions. A value of 1 indicates that the processor supports this technology.",null,null],[17,"CPU_FEATURE_SMX","","/// Safer Mode Extensions. A value of 1 indicates that the processor supports this technology. See Chapter 5, Safer Mode Extensions Reference.",null,null],[17,"CPU_FEATURE_EIST","","/// Enhanced Intel SpeedStep® technology. A value of 1 indicates that the processor supports this technology.",null,null],[17,"CPU_FEATURE_TM2","","/// Thermal Monitor 2. A value of 1 indicates whether the processor supports this technology.",null,null],[17,"CPU_FEATURE_SSSE3","","/// A value of 1 indicates the presence of the Supplemental Streaming SIMD Extensions 3 (SSSE3). A value of 0 indicates the instruction extensions are not present in the processor",null,null],[17,"CPU_FEATURE_CNXTID","","/// L1 Context ID. A value of 1 indicates the L1 data cache mode can be set to either adaptive mode or shared mode. A value of 0 indicates this feature is not supported. See definition of the IA32_MISC_ENABLE MSR Bit 24 (L1 Data Cache Context Mode) for details.",null,null],[17,"CPU_FEATURE_FMA","","/// A value of 1 indicates the processor supports FMA extensions using YMM state.",null,null],[17,"CPU_FEATURE_CMPXCHG16B","","/// CMPXCHG16B Available. A value of 1 indicates that the feature is available. See the CMPXCHG8B/CMPXCHG16B Compare and Exchange Bytes section. 14",null,null],[17,"CPU_FEATURE_PDCM","","/// Perfmon and Debug Capability: A value of 1 indicates the processor supports the performance   and debug feature indication MSR IA32_PERF_CAPABILITIES.",null,null],[17,"CPU_FEATURE_PCID","","/// Process-context identifiers. A value of 1 indicates that the processor supports PCIDs and the software may set CR4.PCIDE to 1.",null,null],[17,"CPU_FEATURE_DCA","","/// A value of 1 indicates the processor supports the ability to prefetch data from a memory mapped device.",null,null],[17,"CPU_FEATURE_SSE41","","/// A value of 1 indicates that the processor supports SSE4.1.",null,null],[17,"CPU_FEATURE_SSE42","","/// A value of 1 indicates that the processor supports SSE4.2.",null,null],[17,"CPU_FEATURE_X2APIC","","/// A value of 1 indicates that the processor supports x2APIC feature.",null,null],[17,"CPU_FEATURE_MOVBE","","/// A value of 1 indicates that the processor supports MOVBE instruction.",null,null],[17,"CPU_FEATURE_POPCNT","","/// A value of 1 indicates that the processor supports the POPCNT instruction.",null,null],[17,"CPU_FEATURE_TSC_DEADLINE","","/// A value of 1 indicates that the processors local APIC timer supports one-shot operation using a TSC deadline value.",null,null],[17,"CPU_FEATURE_AESNI","","/// A value of 1 indicates that the processor supports the AESNI instruction extensions.",null,null],[17,"CPU_FEATURE_XSAVE","","/// A value of 1 indicates that the processor supports the XSAVE/XRSTOR processor extended states feature, the XSETBV/XGETBV instructions, and XCR0.",null,null],[17,"CPU_FEATURE_OSXSAVE","","/// A value of 1 indicates that the OS has enabled XSETBV/XGETBV instructions to access XCR0, and support for processor extended state management using XSAVE/XRSTOR.",null,null],[17,"CPU_FEATURE_AVX","","/// A value of 1 indicates the processor supports the AVX instruction extensions.",null,null],[17,"CPU_FEATURE_F16C","","/// A value of 1 indicates that processor supports 16-bit floating-point conversion instructions.",null,null],[17,"CPU_FEATURE_RDRAND","","/// A value of 1 indicates that processor supports RDRAND instruction.",null,null],[17,"CPU_FEATURE_FPU","","/// Floating Point Unit On-Chip. The processor contains an x87 FPU.",null,null],[17,"CPU_FEATURE_VME","","/// Virtual 8086 Mode Enhancements. Virtual 8086 mode enhancements, including CR4.VME for controlling the feature, CR4.PVI for protected mode virtual interrupts, software interrupt indirection, expansion of the TSS with the software indirection bitmap, and EFLAGS.VIF and EFLAGS.VIP flags.",null,null],[17,"CPU_FEATURE_DE","","/// Debugging Extensions. Support for I/O breakpoints, including CR4.DE for controlling the feature, and optional trapping of accesses to DR4 and DR5.",null,null],[17,"CPU_FEATURE_PSE","","/// Page Size Extension. Large pages of size 4 MByte are supported, including CR4.PSE for controlling the feature, the defined dirty bit in PDE (Page Directory Entries), optional reserved bit trapping in CR3, PDEs, and PTEs.",null,null],[17,"CPU_FEATURE_TSC","","/// Time Stamp Counter. The RDTSC instruction is supported, including CR4.TSD for controlling privilege.",null,null],[17,"CPU_FEATURE_MSR","","/// Model Specific Registers RDMSR and WRMSR Instructions. The RDMSR and WRMSR instructions are supported. Some of the MSRs are implementation dependent.",null,null],[17,"CPU_FEATURE_PAE","","/// Physical Address Extension. Physical addresses greater than 32 bits are supported: extended page table entry formats, an extra level in the page translation tables is defined, 2-MByte pages are supported instead of 4 Mbyte pages if PAE bit is 1.",null,null],[17,"CPU_FEATURE_MCE","","/// Machine Check Exception. Exception 18 is defined for Machine Checks, including CR4.MCE for controlling the feature. This feature does not define the model-specific implementations of machine-check error logging, reporting, and processor shutdowns. Machine Check exception handlers may have to depend on processor version to do model specific processing of the exception, or test for the presence of the Machine Check feature.",null,null],[17,"CPU_FEATURE_CX8","","/// CMPXCHG8B Instruction. The compare-and-exchange 8 bytes (64 bits) instruction is supported (implicitly locked and atomic).",null,null],[17,"CPU_FEATURE_APIC","","/// APIC On-Chip. The processor contains an Advanced Programmable Interrupt Controller (APIC), responding to memory mapped commands in the physical address range FFFE0000H to FFFE0FFFH (by default - some processors permit the APIC to be relocated).",null,null],[17,"CPU_FEATURE_SEP","","/// SYSENTER and SYSEXIT Instructions. The SYSENTER and SYSEXIT and associated MSRs are supported.",null,null],[17,"CPU_FEATURE_MTRR","","/// Memory Type Range Registers. MTRRs are supported. The MTRRcap MSR contains feature bits that describe what memory types are supported, how many variable MTRRs are supported, and whether fixed MTRRs are supported.",null,null],[17,"CPU_FEATURE_PGE","","/// Page Global Bit. The global bit is supported in paging-structure entries that map a page, indicating TLB entries that are common to different processes and need not be flushed. The CR4.PGE bit controls this feature.",null,null],[17,"CPU_FEATURE_MCA","","/// Machine Check Architecture. The Machine Check Architecture, which provides a compatible mechanism for error reporting in P6 family, Pentium 4, Intel Xeon processors, and future processors, is supported. The MCG_CAP MSR contains feature bits describing how many banks of error reporting MSRs are supported.",null,null],[17,"CPU_FEATURE_CMOV","","/// Conditional Move Instructions. The conditional move instruction CMOV is supported. In addition, if x87 FPU is present as indicated by the CPUID.FPU feature bit, then the FCOMI and FCMOV instructions are supported",null,null],[17,"CPU_FEATURE_PAT","","/// Page Attribute Table. Page Attribute Table is supported. This feature augments the Memory Type Range Registers (MTRRs), allowing an operating system to specify attributes of memory accessed through a linear address on a 4KB granularity.",null,null],[17,"CPU_FEATURE_PSE36","","/// 36-Bit Page Size Extension. 4-MByte pages addressing physical memory beyond 4 GBytes are supported with 32-bit paging. This feature indicates that upper bits of the physical address of a 4-MByte page are encoded in bits 20:13 of the page-directory entry. Such physical addresses are limited by MAXPHYADDR and may be up to 40 bits in size.",null,null],[17,"CPU_FEATURE_PSN","","/// Processor Serial Number. The processor supports the 96-bit processor identification number feature and the feature is enabled.",null,null],[17,"CPU_FEATURE_CLFSH","","/// CLFLUSH Instruction. CLFLUSH Instruction is supported.",null,null],[17,"CPU_FEATURE_DS","","/// Debug Store. The processor supports the ability to write debug information into a memory resident buffer. This feature is used by the branch trace store (BTS) and precise event-based sampling (PEBS) facilities (see Chapter 23, Introduction to Virtual-Machine Extensions, in the Intel® 64 and IA-32 Architectures Software Developers Manual, Volume 3C).",null,null],[17,"CPU_FEATURE_ACPI","","/// Thermal Monitor and Software Controlled Clock Facilities. The processor implements internal MSRs that allow processor temperature to be monitored and processor performance to be modulated in predefined duty cycles under software control.",null,null],[17,"CPU_FEATURE_MMX","","/// Intel MMX Technology. The processor supports the Intel MMX technology.",null,null],[17,"CPU_FEATURE_FXSR","","/// FXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR instructions are supported for fast save and restore of the floating point context. Presence of this bit also indicates that CR4.OSFXSR is available for an operating system to indicate that it supports the FXSAVE and FXRSTOR instructions.",null,null],[17,"CPU_FEATURE_SSE","","/// SSE. The processor supports the SSE extensions.",null,null],[17,"CPU_FEATURE_SSE2","","/// SSE2. The processor supports the SSE2 extensions.",null,null],[17,"CPU_FEATURE_SS","","/// Self Snoop. The processor supports the management of conflicting memory types by performing a snoop of its own cache structure for transactions issued to the bus.",null,null],[17,"CPU_FEATURE_HTT","","/// Max APIC IDs reserved field is Valid. A value of 0 for HTT indicates there is only a single logical processor in the package and software should assume only a single APIC ID is reserved.  A value of 1 for HTT indicates the value in CPUID.1.EBX[23:16] (the Maximum number of addressable IDs for logical processors in this package) is valid for the package.",null,null],[17,"CPU_FEATURE_TM","","/// Thermal Monitor. The processor implements the thermal monitor automatic thermal control circuitry (TCC).",null,null],[17,"CPU_FEATURE_PBE","","/// Pending Break Enable. The processor supports the use of the FERR#/PBE# pin when the processor is in the stop-clock state (STPCLK# is asserted) to signal the processor that an interrupt is pending and that the processor should return to normal operation to handle the interrupt. Bit 10 (PBE enable) in the IA32_MISC_ENABLE MSR enables this capability.",null,null],[17,"CPU_FEATURE_DTS","","/// Digital temperature sensor is supported if set. (Bit 00)",null,null],[17,"CPU_FEATURE_TURBO_BOOST","","/// Intel Turbo Boost Technology Available (see description of IA32_MISC_ENABLE[38]). (Bit 01)",null,null],[17,"CPU_FEATURE_ARAT","","/// ARAT. APIC-Timer-always-running feature is supported if set. (Bit 02)",null,null],[17,"CPU_FEATURE_PLN","","/// PLN. Power limit notification controls are supported if set. (Bit 04)",null,null],[17,"CPU_FEATURE_ECMD","","/// ECMD. Clock modulation duty cycle extension is supported if set. (Bit 05)",null,null],[17,"CPU_FEATURE_PTM","","/// PTM. Package thermal management is supported if set. (Bit 06)",null,null],[17,"CPU_FEATURE_HW_COORD_FEEDBACK","","/// Hardware Coordination Feedback Capability (Presence of IA32_MPERF and IA32_APERF). The capability to provide a measure of delivered processor performance (since last reset of the counters), as a percentage of expected processor performance at frequency specified in CPUID Brand String Bits 02 - 01",null,null],[17,"CPU_FEATURE_ENERGY_BIAS_PREF","","/// The processor supports performance-energy bias preference if CPUID.06H:ECX.SETBH[bit 3] is set and it also implies the presence of a new architectural MSR called IA32_ENERGY_PERF_BIAS (1B0H)",null,null],[17,"CPU_FEATURE_FSGSBASE","","/// FSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if 1. (Bit 00)",null,null],[17,"CPU_FEATURE_ADJUST_MSR","","/// IA32_TSC_ADJUST MSR is supported if 1. (Bit 01)",null,null],[17,"CPU_FEATURE_BMI1","","/// BMI1 (Bit 03)",null,null],[17,"CPU_FEATURE_HLE","","/// HLE (Bit 04)",null,null],[17,"CPU_FEATURE_AVX2","","/// AVX2 (Bit 05)",null,null],[17,"CPU_FEATURE_SMEP","","/// SMEP. Supports Supervisor-Mode Execution Prevention if 1. (Bit 07)",null,null],[17,"CPU_FEATURE_BMI2","","/// BMI2 (Bit 08)",null,null],[17,"CPU_FEATURE_REP_MOVSB_STOSB","","/// Supports Enhanced REP MOVSB/STOSB if 1. (Bit 09)",null,null],[17,"CPU_FEATURE_INVPCID","","/// INVPCID. If 1, supports INVPCID instruction for system software that manages process-context identifiers. (Bit 10)",null,null],[17,"CPU_FEATURE_RTM","","/// RTM (Bit 11)",null,null],[17,"CPU_FEATURE_QM","","/// Supports Quality of Service Monitoring (QM) capability if 1. (Bit 12)",null,null],[17,"CPU_FEATURE_DEPRECATE_FPU_CS_DS","","/// Deprecates FPU CS and FPU DS values if 1. (Bit 13)",null,null],[17,"CPU_FEATURE_CORE_CYC_EV_UNAVAILABLE","","/// Core cycle event not available if 1. (Bit 0)",null,null],[17,"CPU_FEATURE_INST_RET_EV_UNAVAILABLE","","/// Instruction retired event not available if 1. (Bit 01)",null,null],[17,"CPU_FEATURE_REF_CYC_EV_UNAVAILABLE","","/// Reference cycles event not available if 1. (Bit 02)",null,null],[17,"CPU_FEATURE_CACHE_REF_EV_UNAVAILABLE","","/// Last-level cache reference event not available if 1. (Bit 03)",null,null],[17,"CPU_FEATURE_LL_CACHE_MISS_EV_UNAVAILABLE","","/// Last-level cache misses event not available if 1. (Bit 04)",null,null],[17,"CPU_FEATURE_BRANCH_INST_RET_EV_UNAVAILABLE","","/// Branch instruction retired event not available if 1. (Bit 05)",null,null],[17,"CPU_FEATURE_BRANCH_MISPRED_EV_UNAVAILABLE","","/// Branch mispredict retired event not available if 1. (Bit 06)",null,null],[17,"CPU_FEATURE_LAHF_SAHF","","/// LAHF/SAHF available in 64-bit mode.",null,null],[17,"CPU_FEATURE_LZCNT","","/// Bit 05: LZCNT",null,null],[17,"CPU_FEATURE_PREFETCHW","","/// Bit 08: PREFETCHW",null,null],[17,"CPU_FEATURE_SYSCALL_SYSRET","","/// SYSCALL/SYSRET available in 64-bit mode (Bit 11).",null,null],[17,"CPU_FEATURE_EXECUTE_DISABLE","","/// Execute Disable Bit available (Bit 20).",null,null],[17,"CPU_FEATURE_1GIB_PAGES","","/// 1-GByte pages are available if 1 (Bit 26).",null,null],[17,"CPU_FEATURE_RDTSCP","","/// RDTSCP and IA32_TSC_AUX are available if 1 (Bit 27).",null,null],[17,"CPU_FEATURE_64BIT_MODE","","/// Intel ® 64 Architecture available if 1 (Bit 29).",null,null],[11,"fmt","","",169,{"inputs":[{"name":"cpuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"cpuidresult"}],"output":{"name":"cpuidresult"}}],[11,"clone","","",0,{"inputs":[{"name":"cpuidresult"}],"output":{"name":"cpuidresult"}}],[11,"fmt","","",0,{"inputs":[{"name":"cpuidresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"cpuid"}}],[11,"get_vendor_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_feature_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_cache_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_processor_serial","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_cache_parameters","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_monitor_mwait_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_thermal_power_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_extended_feature_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_direct_cache_access_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_performance_monitoring_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_extended_topology_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_extended_state_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_quality_of_service_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_extended_function_info","","",169,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"fmt","","",170,{"inputs":[{"name":"vendorinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_string","","",170,{"inputs":[{"name":"vendorinfo"}],"output":{"name":"str"}}],[11,"fmt","","",171,{"inputs":[{"name":"cacheinfoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",171,{"inputs":[{"name":"cacheinfoiter"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"cacheinfotype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"cacheinfotype"}],"output":{"name":"cacheinfotype"}}],[11,"fmt","","",1,{"inputs":[{"name":"cacheinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"cacheinfo"}],"output":{"name":"cacheinfo"}}],[11,"fmt","","",1,{"inputs":[{"name":"cacheinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"vendorinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serial_lower","","Bits 00-31 of 96 bit processor serial number.\n(Available in Pentium III processor only; otherwise, the value in this register is reserved.)",172,{"inputs":[{"name":"processorserial"}],"output":{"name":"u32"}}],[11,"serial_middle","","Bits 32-63 of 96 bit processor serial number.\n(Available in Pentium III processor only; otherwise, the value in this register is reserved.)",172,{"inputs":[{"name":"processorserial"}],"output":{"name":"u32"}}],[11,"fmt","","",173,{"inputs":[{"name":"featureinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_sse3","","Streaming SIMD Extensions 3 (SSE3). A value of 1 indicates the processor supports this technology.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pclmulqdq","","PCLMULQDQ. A value of 1 indicates the processor supports the PCLMULQDQ instruction",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_ds_area","","64-bit DS Area. A value of 1 indicates the processor supports DS area using 64-bit layout",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_monitor_mwait","","MONITOR/MWAIT. A value of 1 indicates the processor supports this feature.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cpl","","CPL Qualified Debug Store. A value of 1 indicates the processor supports the extensions to the  Debug Store feature to allow for branch message storage qualified by CPL.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_vmx","","Virtual Machine Extensions. A value of 1 indicates that the processor supports this technology.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_smx","","Safer Mode Extensions. A value of 1 indicates that the processor supports this technology. See Chapter 5, Safer Mode Extensions Reference.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_eist","","Enhanced Intel SpeedStep® technology. A value of 1 indicates that the processor supports this technology.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_tm2","","Thermal Monitor 2. A value of 1 indicates whether the processor supports this technology.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_ssse3","","A value of 1 indicates the presence of the Supplemental Streaming SIMD Extensions 3 (SSSE3). A value of 0 indicates the instruction extensions are not present in the processor",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cnxtid","","L1 Context ID. A value of 1 indicates the L1 data cache mode can be set to either adaptive mode or shared mode. A value of 0 indicates this feature is not supported. See definition of the IA32_MISC_ENABLE MSR Bit 24 (L1 Data Cache Context Mode) for details.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_fma","","A value of 1 indicates the processor supports FMA extensions using YMM state.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cmpxchg16b","","CMPXCHG16B Available. A value of 1 indicates that the feature is available. See the CMPXCHG8B/CMPXCHG16B Compare and Exchange Bytes section. 14",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pdcm","","Perfmon and Debug Capability: A value of 1 indicates the processor supports the performance   and debug feature indication MSR IA32_PERF_CAPABILITIES.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pcid","","Process-context identifiers. A value of 1 indicates that the processor supports PCIDs and the software may set CR4.PCIDE to 1.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_dca","","A value of 1 indicates the processor supports the ability to prefetch data from a memory mapped device.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sse41","","A value of 1 indicates that the processor supports SSE4.1.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sse42","","A value of 1 indicates that the processor supports SSE4.2.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_x2apic","","A value of 1 indicates that the processor supports x2APIC feature.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_movbe","","A value of 1 indicates that the processor supports MOVBE instruction.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_popcnt","","A value of 1 indicates that the processor supports the POPCNT instruction.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_tsc_deadline","","A value of 1 indicates that the processors local APIC timer supports one-shot operation using a TSC deadline value.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_aesni","","A value of 1 indicates that the processor supports the AESNI instruction extensions.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_xsave","","A value of 1 indicates that the processor supports the XSAVE/XRSTOR processor extended states feature, the XSETBV/XGETBV instructions, and XCR0.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_oxsave","","A value of 1 indicates that the OS has enabled XSETBV/XGETBV instructions to access XCR0, and support for processor extended state management using XSAVE/XRSTOR.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_avx","","A value of 1 indicates the processor supports the AVX instruction extensions.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_f16c","","A value of 1 indicates that processor supports 16-bit floating-point conversion instructions.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_rdrand","","A value of 1 indicates that processor supports RDRAND instruction.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_fpu","","Floating Point Unit On-Chip. The processor contains an x87 FPU.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_vme","","Virtual 8086 Mode Enhancements. Virtual 8086 mode enhancements, including CR4.VME for controlling the feature, CR4.PVI for protected mode virtual interrupts, software interrupt indirection, expansion of the TSS with the software indirection bitmap, and EFLAGS.VIF and EFLAGS.VIP flags.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_de","","Debugging Extensions. Support for I/O breakpoints, including CR4.DE for controlling the feature, and optional trapping of accesses to DR4 and DR5.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pse","","Page Size Extension. Large pages of size 4 MByte are supported, including CR4.PSE for controlling the feature, the defined dirty bit in PDE (Page Directory Entries), optional reserved bit trapping in CR3, PDEs, and PTEs.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_tsc","","Time Stamp Counter. The RDTSC instruction is supported, including CR4.TSD for controlling privilege.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_msr","","Model Specific Registers RDMSR and WRMSR Instructions. The RDMSR and WRMSR instructions are supported. Some of the MSRs are implementation dependent.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pae","","Physical Address Extension. Physical addresses greater than 32 bits are supported: extended page table entry formats, an extra level in the page translation tables is defined, 2-MByte pages are supported instead of 4 Mbyte pages if PAE bit is 1.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_mce","","Machine Check Exception. Exception 18 is defined for Machine Checks, including CR4.MCE for controlling the feature. This feature does not define the model-specific implementations of machine-check error logging, reporting, and processor shutdowns. Machine Check exception handlers may have to depend on processor version to do model specific processing of the exception, or test for the presence of the Machine Check feature.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cmpxchg8b","","CMPXCHG8B Instruction. The compare-and-exchange 8 bytes (64 bits) instruction is supported (implicitly locked and atomic).",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_apic","","APIC On-Chip. The processor contains an Advanced Programmable Interrupt Controller (APIC), responding to memory mapped commands in the physical address range FFFE0000H to FFFE0FFFH (by default - some processors permit the APIC to be relocated).",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sysenter_sysexit","","SYSENTER and SYSEXIT Instructions. The SYSENTER and SYSEXIT and associated MSRs are supported.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_mtrr","","Memory Type Range Registers. MTRRs are supported. The MTRRcap MSR contains feature bits that describe what memory types are supported, how many variable MTRRs are supported, and whether fixed MTRRs are supported.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pge","","Page Global Bit. The global bit is supported in paging-structure entries that map a page, indicating TLB entries that are common to different processes and need not be flushed. The CR4.PGE bit controls this feature.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_mca","","Machine Check Architecture. The Machine Check Architecture, which provides a compatible mechanism for error reporting in P6 family, Pentium 4, Intel Xeon processors, and future processors, is supported. The MCG_CAP MSR contains feature bits describing how many banks of error reporting MSRs are supported.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cmov","","Conditional Move Instructions. The conditional move instruction CMOV is supported. In addition, if x87 FPU is present as indicated by the CPUID.FPU feature bit, then the FCOMI and FCMOV instructions are supported",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pat","","Page Attribute Table. Page Attribute Table is supported. This feature augments the Memory Type Range Registers (MTRRs), allowing an operating system to specify attributes of memory accessed through a linear address on a 4KB granularity.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pse36","","36-Bit Page Size Extension. 4-MByte pages addressing physical memory beyond 4 GBytes are supported with 32-bit paging. This feature indicates that upper bits of the physical address of a 4-MByte page are encoded in bits 20:13 of the page-directory entry. Such physical addresses are limited by MAXPHYADDR and may be up to 40 bits in size.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_psn","","Processor Serial Number. The processor supports the 96-bit processor identification number feature and the feature is enabled.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_clflush","","CLFLUSH Instruction. CLFLUSH Instruction is supported.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_ds","","Debug Store. The processor supports the ability to write debug information into a memory resident buffer. This feature is used by the branch trace store (BTS) and precise event-based sampling (PEBS) facilities (see Chapter 23, Introduction to Virtual-Machine Extensions, in the Intel® 64 and IA-32 Architectures Software Developers Manual, Volume 3C).",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_acpi","","Thermal Monitor and Software Controlled Clock Facilities. The processor implements internal MSRs that allow processor temperature to be monitored and processor performance to be modulated in predefined duty cycles under software control.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_mmx","","Intel MMX Technology. The processor supports the Intel MMX technology.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_fxsave_fxstor","","FXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR instructions are supported for fast save and restore of the floating point context. Presence of this bit also indicates that CR4.OSFXSR is available for an operating system to indicate that it supports the FXSAVE and FXRSTOR instructions.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sse","","SSE. The processor supports the SSE extensions.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sse2","","SSE2. The processor supports the SSE2 extensions.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_ss","","Self Snoop. The processor supports the management of conflicting memory types by performing a snoop of its own cache structure for transactions issued to the bus.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_htt","","Max APIC IDs reserved field is Valid. A value of 0 for HTT indicates there is only a single logical processor in the package and software should assume only a single APIC ID is reserved.  A value of 1 for HTT indicates the value in CPUID.1.EBX[23:16] (the Maximum number of addressable IDs for logical processors in this package) is valid for the package.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_tm","","Thermal Monitor. The processor implements the thermal monitor automatic thermal control circuitry (TCC).",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pbe","","Pending Break Enable. The processor supports the use of the FERR#/PBE# pin when the processor is in the stop-clock state (STPCLK# is asserted) to signal the processor that an interrupt is pending and that the processor should return to normal operation to handle the interrupt. Bit 10 (PBE enable) in the IA32_MISC_ENABLE MSR enables this capability.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"hash","","",174,null],[11,"cmp","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"option"}}],[11,"lt","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"le","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"gt","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"ge","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"featureinfoecx"}],"output":{"name":"featureinfoecx"}}],[11,"eq","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"featureinfoecx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",174,{"inputs":[{"name":"featureinfoecx"}],"output":{"name":"featureinfoecx"}}],[11,"all","","Returns the set containing all flags.",174,{"inputs":[{"name":"featureinfoecx"}],"output":{"name":"featureinfoecx"}}],[11,"bits","","Returns the raw value of the flags currently stored.",174,{"inputs":[{"name":"featureinfoecx"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"u32"}],"output":{"name":"featureinfoecx"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",174,{"inputs":[{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",174,{"inputs":[{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"featureinfoecx"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"featureinfoecx"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"featureinfoecx"}}],[11,"sub","","Returns the set difference of the two sets of flags.",174,{"inputs":[{"name":"featureinfoecx"},{"name":"featureinfoecx"}],"output":{"name":"featureinfoecx"}}],[11,"not","","Returns the complement of this set of flags.",174,{"inputs":[{"name":"featureinfoecx"}],"output":{"name":"featureinfoecx"}}],[11,"hash","","",175,null],[11,"cmp","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"option"}}],[11,"lt","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"le","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"gt","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"ge","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"featureinfoedx"}],"output":{"name":"featureinfoedx"}}],[11,"eq","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"featureinfoedx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",175,{"inputs":[{"name":"featureinfoedx"}],"output":{"name":"featureinfoedx"}}],[11,"all","","Returns the set containing all flags.",175,{"inputs":[{"name":"featureinfoedx"}],"output":{"name":"featureinfoedx"}}],[11,"bits","","Returns the raw value of the flags currently stored.",175,{"inputs":[{"name":"featureinfoedx"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"u32"}],"output":{"name":"featureinfoedx"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",175,{"inputs":[{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",175,{"inputs":[{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"featureinfoedx"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"featureinfoedx"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"featureinfoedx"}}],[11,"sub","","Returns the set difference of the two sets of flags.",175,{"inputs":[{"name":"featureinfoedx"},{"name":"featureinfoedx"}],"output":{"name":"featureinfoedx"}}],[11,"not","","Returns the complement of this set of flags.",175,{"inputs":[{"name":"featureinfoedx"}],"output":{"name":"featureinfoedx"}}],[11,"extended_family_id","","Version Information: Extended Family",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"extended_model_id","","Version Information: Extended Model",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"family_id","","Version Information: Family",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"model_id","","Version Information: Model",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"stepping_id","","Version Information: Stepping ID",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"brand_index","","Brand Index",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"cflush_cache_line_size","","CLFLUSH line size (Value ∗ 8 = cache line size in bytes)",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"initial_local_apic_id","","Initial APIC ID",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"max_logical_processor_ids","","Maximum number of addressable IDs for logical processors in this physical package.",173,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"next","","",176,{"inputs":[{"name":"cacheparametersiter"}],"output":{"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"cacheparameter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"cacheparameter"}}],[11,"eq","","",4,{"inputs":[{"name":"cachetype"},{"name":"cachetype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"cachetype"},{"name":"cachetype"}],"output":{"name":"bool"}}],[11,"cache_type","","Cache Type",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"cachetype"}}],[11,"level","","Cache Level (starts at 1)",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"u8"}}],[11,"is_self_initializing","","Self Initializing cache level (does not need SW initialization).",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"is_fully_associative","","Fully Associative cache",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"max_cores_for_cache","","Maximum number of addressable IDs for logical processors sharing this cache",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"max_cores_for_package","","Maximum number of addressable IDs for processor cores in the physical package",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"coherency_line_size","","System Coherency Line Size (Bits 11-00)",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"physical_line_partitions","","Physical Line partitions (Bits 21-12)",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"associativity","","Ways of associativity (Bits 31-22)",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"sets","","Number of Sets (Bits 31-00)",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"is_write_back_invalidate","","Write-Back Invalidate/Invalidate (Bit 0)\nFalse: WBINVD/INVD from threads sharing this cache acts upon lower level caches for threads sharing this cache.\nTrue: WBINVD/INVD is not guaranteed to act upon lower level caches of non-originating threads sharing this cache.",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"is_inclusive","","Cache Inclusiveness (Bit 1)\nFalse: Cache is not inclusive of lower cache levels.\nTrue: Cache is inclusive of lower cache levels.",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"has_complex_indexing","","Complex Cache Indexing (Bit 2)\nFalse: Direct mapped cache.\nTrue: A complex function is used to index the cache, potentially using all address bits.",177,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"fmt","","",178,{"inputs":[{"name":"monitormwaitinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"smallest_monitor_line","","Smallest monitor-line size in bytes (default is processor's monitor granularity)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"largest_monitor_line","","Largest monitor-line size in bytes (default is processor's monitor granularity",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"extensions_supported","","Enumeration of Monitor-Mwait extensions (beyond EAX and EBX registers) supported",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"bool"}}],[11,"interrupts_as_break_event","","Supports treating interrupts as break-event for MWAIT, even when interrupts disabled",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"bool"}}],[11,"supported_c0_states","","Number of C0 sub C-states supported using MWAIT (Bits 03 - 00)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c1_states","","Number of C1 sub C-states supported using MWAIT (Bits 07 - 04)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c2_states","","Number of C2 sub C-states supported using MWAIT (Bits 11 - 08)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c3_states","","Number of C3 sub C-states supported using MWAIT (Bits 15 - 12)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c4_states","","Number of C4 sub C-states supported using MWAIT (Bits 19 - 16)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c5_states","","Number of C5 sub C-states supported using MWAIT (Bits 23 - 20)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c6_states","","Number of C6 sub C-states supported using MWAIT (Bits 27 - 24)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c7_states","","Number of C7 sub C-states supported using MWAIT (Bits 31 - 28)",178,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"fmt","","",179,{"inputs":[{"name":"thermalpowerinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_dts","","Digital temperature sensor is supported if set.",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_turbo_boost","","Intel Turbo Boost Technology Available (see description of IA32_MISC_ENABLE[38]).",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_arat","","ARAT. APIC-Timer-always-running feature is supported if set.",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_pln","","PLN. Power limit notification controls are supported if set.",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_ecmd","","ECMD. Clock modulation duty cycle extension is supported if set.",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_ptm","","PTM. Package thermal management is supported if set.",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_hw_coord_feedback","","Hardware Coordination Feedback Capability (Presence of IA32_MPERF and IA32_APERF). The capability to provide a measure of delivered processor performance (since last reset of the counters), as a percentage of expected processor performance at frequency specified in CPUID Brand String Bits 02 - 01",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_energy_bias_pref","","The processor supports performance-energy bias preference if CPUID.06H:ECX.SETBH[bit 3] is set and it also implies the presence of a new architectural MSR called IA32_ENERGY_PERF_BIAS (1B0H)",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"hash","","",180,null],[11,"cmp","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"option"}}],[11,"lt","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"le","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"gt","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"ge","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"eq","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",180,{"inputs":[{"name":"thermalpowerfeatureseax"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"all","","Returns the set containing all flags.",180,{"inputs":[{"name":"thermalpowerfeatureseax"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"bits","","Returns the raw value of the flags currently stored.",180,{"inputs":[{"name":"thermalpowerfeatureseax"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"u32"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",180,{"inputs":[{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",180,{"inputs":[{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"sub","","Returns the set difference of the two sets of flags.",180,{"inputs":[{"name":"thermalpowerfeatureseax"},{"name":"thermalpowerfeatureseax"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"not","","Returns the complement of this set of flags.",180,{"inputs":[{"name":"thermalpowerfeatureseax"}],"output":{"name":"thermalpowerfeatureseax"}}],[11,"hash","","",181,null],[11,"cmp","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"option"}}],[11,"lt","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"le","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"gt","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"ge","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"eq","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"all","","Returns the set containing all flags.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"bits","","Returns the raw value of the flags currently stored.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"u32"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"sub","","Returns the set difference of the two sets of flags.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"},{"name":"thermalpowerfeaturesecx"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"not","","Returns the complement of this set of flags.",181,{"inputs":[{"name":"thermalpowerfeaturesecx"}],"output":{"name":"thermalpowerfeaturesecx"}}],[11,"dts_irq_threshold","","Number of Interrupt Thresholds in Digital Thermal Sensor",179,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"u8"}}],[11,"fmt","","",182,{"inputs":[{"name":"extendedfeatures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_fsgsbase","","FSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if 1.",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_tsc_adjust_msr","","IA32_TSC_ADJUST MSR is supported if 1.",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_bmi1","","BMI1",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_hle","","HLE",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_avx2","","AVX2",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_smep","","SMEP. Supports Supervisor-Mode Execution Prevention if 1.",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_bmi2","","BMI2",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_rep_movsb_stosb","","Supports Enhanced REP MOVSB/STOSB if 1.",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_invpcid","","INVPCID. If 1, supports INVPCID instruction for system software that manages process-context identifiers.",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_rtm","","RTM",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_qm","","Supports Quality of Service Monitoring (QM) capability if 1.",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_fpu_cs_ds_deprecated","","Deprecates FPU CS and FPU DS values if 1.",182,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"hash","","",183,null],[11,"cmp","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"option"}}],[11,"lt","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"le","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"gt","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"ge","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"extendedfeaturesebx"}],"output":{"name":"extendedfeaturesebx"}}],[11,"eq","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"fmt","","",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",183,{"inputs":[{"name":"extendedfeaturesebx"}],"output":{"name":"extendedfeaturesebx"}}],[11,"all","","Returns the set containing all flags.",183,{"inputs":[{"name":"extendedfeaturesebx"}],"output":{"name":"extendedfeaturesebx"}}],[11,"bits","","Returns the raw value of the flags currently stored.",183,{"inputs":[{"name":"extendedfeaturesebx"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"u32"}],"output":{"name":"extendedfeaturesebx"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",183,{"inputs":[{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",183,{"inputs":[{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"extendedfeaturesebx"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"extendedfeaturesebx"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"extendedfeaturesebx"}}],[11,"sub","","Returns the set difference of the two sets of flags.",183,{"inputs":[{"name":"extendedfeaturesebx"},{"name":"extendedfeaturesebx"}],"output":{"name":"extendedfeaturesebx"}}],[11,"not","","Returns the complement of this set of flags.",183,{"inputs":[{"name":"extendedfeaturesebx"}],"output":{"name":"extendedfeaturesebx"}}],[11,"fmt","","",184,{"inputs":[{"name":"directcacheaccessinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_dca_cap_value","","Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address 1F8H)",184,{"inputs":[{"name":"directcacheaccessinfo"}],"output":{"name":"u32"}}],[11,"fmt","","",185,{"inputs":[{"name":"performancemonitoringinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"version_id","","Version ID of architectural performance monitoring. (Bits 07 - 00)",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"number_of_counters","","Number of general-purpose performance monitoring counter per logical processor. (Bits 15- 08)",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"counter_bit_width","","Bit width of general-purpose, performance monitoring counter. (Bits 23 - 16)",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"ebx_length","","Length of EBX bit vector to enumerate architectural performance monitoring events. (Bits 31 - 24)",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"fixed_function_counters","","Number of fixed-function performance counters (if Version ID > 1). (Bits 04 - 00)",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"fixed_function_counters_bit_width","","Bit width of fixed-function performance counters (if Version ID > 1). (Bits 12- 05)",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"is_core_cyc_ev_unavailable","","Core cycle event not available if 1.",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_inst_ret_ev_unavailable","","Instruction retired event not available if 1.",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_ref_cycle_ev_unavailable","","Reference cycles event not available if 1.",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_cache_ref_ev_unavailable","","Last-level cache reference event not available if 1.",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_ll_cache_miss_ev_unavailable","","Last-level cache misses event not available if 1.",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_branch_inst_ret_ev_unavailable","","Branch instruction retired event not available if 1.",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_branch_midpred_ev_unavailable","","Branch mispredict retired event not available if 1.",185,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"hash","","",186,null],[11,"cmp","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"option"}}],[11,"lt","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"le","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"gt","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"ge","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"eq","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"all","","Returns the set containing all flags.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"bits","","Returns the raw value of the flags currently stored.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"u32"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"sub","","Returns the set difference of the two sets of flags.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"},{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"not","","Returns the complement of this set of flags.",186,{"inputs":[{"name":"performancemonitoringfeaturesebx"}],"output":{"name":"performancemonitoringfeaturesebx"}}],[11,"fmt","","",187,{"inputs":[{"name":"extendedtopologyiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"extendedtopologylevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"processors","","Number of logical processors at this level type.\nThe number reflects configuration as shipped.",188,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"u16"}}],[11,"level_number","","Level number.",188,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"u8"}}],[11,"level_type","","",188,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"topologytype"}}],[11,"x2apic_id","","x2APIC ID the current logical processor. (Bits 31-00)",188,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"u32"}}],[11,"shift_right_for_next_apic_id","","Number of bits to shift right on x2APIC ID to get a unique topology ID of the next level type. (Bits 04-00)\nAll logical processors with the same next level ID share current level.",188,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"u32"}}],[11,"fmt","","",5,{"inputs":[{"name":"topologytype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"topologytype"},{"name":"topologytype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"topologytype"},{"name":"topologytype"}],"output":{"name":"bool"}}],[11,"next","","",187,{"inputs":[{"name":"extendedtopologyiter"}],"output":{"name":"option"}}],[11,"fmt","","",189,{"inputs":[{"name":"extendedstateinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"xcr0","","Reports the valid bit fields of the lower 32 bits of XCR0. If a bit is 0,\nthe corresponding bit field in XCR0 is reserved.",189,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"u64"}}],[11,"xcr0_upper_bits","","Reports the valid bit fields of the upper 32 bits of XCR0. If a bit is 0,\nthe corresponding bit field in XCR0 is reserved.",189,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"u32"}}],[11,"maximum_size_enabled_features","","Maximum size (bytes, from the beginning of the XSAVE/XRSTOR save area) required by\nenabled features in XCR0. May be different than ECX if some features at the end of the XSAVE save area\nare not enabled.",189,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"u32"}}],[11,"maximum_size_supported_features","","Maximum size (bytes, from the beginning of the XSAVE/XRSTOR save area) of the\nXSAVE/XRSTOR save area required by all supported features in the processor,\ni.e all the valid bit fields in XCR0.",189,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"u32"}}],[11,"has_xsaveopt","","CPU has xsaveopt feature.",189,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"iter","","Iterator over extended state enumeration levels >= 2.",189,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"extendedstateiter"}}],[11,"next","","",190,{"inputs":[{"name":"extendedstateiter"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"extendedstateident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"extendedstateident"},{"name":"extendedstateident"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"extendedstateident"},{"name":"extendedstateident"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"extendedstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","The size in bytes (from the offset specified in EBX) of the save area\nfor an extended state feature associated with a valid sub-leaf index, n.\nThis field reports 0 if the sub-leaf index, n, is invalid.",2,{"inputs":[{"name":"extendedstate"}],"output":{"name":"u32"}}],[11,"offset","","The offset in bytes of this extended state components save area\nfrom the beginning of the XSAVE/XRSTOR area.",2,{"inputs":[{"name":"extendedstate"}],"output":{"name":"u32"}}],[11,"fmt","","",191,{"inputs":[{"name":"qosinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"maximum_rmid_range","","Maximum range (zero-based) of RMID within this physical processor of all types.",191,{"inputs":[{"name":"qosinfo"}],"output":{"name":"u32"}}],[11,"has_l3_qos","","Supports L3 Cache QoS if true.",191,{"inputs":[{"name":"qosinfo"}],"output":{"name":"bool"}}],[11,"conversion_factor","","Conversion factor from reported IA32_QM_CTR value to occupancy metric (bytes).",191,{"inputs":[{"name":"qosinfo"}],"output":{"name":"u32"}}],[11,"maximum_range_l3_rmid","","Maximum range (zero-based) of RMID of L3.",191,{"inputs":[{"name":"qosinfo"}],"output":{"name":"u32"}}],[11,"has_l3_occupancy_monitoring","","Supports L3 occupancy monitoring if true.",191,{"inputs":[{"name":"qosinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",192,{"inputs":[{"name":"extendedfunctioninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"l2associativity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"l2associativity"},{"name":"l2associativity"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"l2associativity"},{"name":"l2associativity"}],"output":{"name":"bool"}}],[11,"processor_brand_string","","Retrieve processor brand string.",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"extended_signature","","Extended Processor Signature and Feature Bits.",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"cache_line_size","","Cache Line size in bytes",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"l2_associativity","","L2 Associativity field",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"cache_size","","Cache size in 1K units",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"physical_address_bits","","#Physical Address Bits",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"linear_address_bits","","#Linear Address Bits",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"has_invariant_tsc","","Is Invariant TSC available?",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_lahf_sahf","","Is LAHF/SAHF available in 64-bit mode?",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_lzcnt","","Is LZCNT available?",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_prefetchw","","Is PREFETCHW available?",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_syscall_sysret","","Are fast system calls available.",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_execute_disable","","Is there support for execute disable bit.",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_1gib_pages","","Is there support for 1GiB pages.",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_rdtscp","","Check support for rdtscp instruction.",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_64bit_mode","","Check support for 64-bit mode.",192,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"hash","","",193,null],[11,"cmp","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"option"}}],[11,"lt","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"le","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"gt","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"ge","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"eq","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"fmt","","",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",193,{"inputs":[{"name":"extendedfunctioninfoecx"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"all","","Returns the set containing all flags.",193,{"inputs":[{"name":"extendedfunctioninfoecx"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"bits","","Returns the raw value of the flags currently stored.",193,{"inputs":[{"name":"extendedfunctioninfoecx"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"u32"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",193,{"inputs":[{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",193,{"inputs":[{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"sub","","Returns the set difference of the two sets of flags.",193,{"inputs":[{"name":"extendedfunctioninfoecx"},{"name":"extendedfunctioninfoecx"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"not","","Returns the complement of this set of flags.",193,{"inputs":[{"name":"extendedfunctioninfoecx"}],"output":{"name":"extendedfunctioninfoecx"}}],[11,"hash","","",194,null],[11,"cmp","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"option"}}],[11,"lt","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"le","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"gt","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"ge","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"}],"output":{"name":"extendedfunctioninfoedx"}}],[11,"eq","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"fmt","","",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",194,{"inputs":[{"name":"extendedfunctioninfoedx"}],"output":{"name":"extendedfunctioninfoedx"}}],[11,"all","","Returns the set containing all flags.",194,{"inputs":[{"name":"extendedfunctioninfoedx"}],"output":{"name":"extendedfunctioninfoedx"}}],[11,"bits","","Returns the raw value of the flags currently stored.",194,{"inputs":[{"name":"extendedfunctioninfoedx"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"u32"}],"output":{"name":"extendedfunctioninfoedx"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",194,{"inputs":[{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",194,{"inputs":[{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"extendedfunctioninfoedx"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"extendedfunctioninfoedx"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"extendedfunctioninfoedx"}}],[11,"sub","","Returns the set difference of the two sets of flags.",194,{"inputs":[{"name":"extendedfunctioninfoedx"},{"name":"extendedfunctioninfoedx"}],"output":{"name":"extendedfunctioninfoedx"}}],[11,"not","","Returns the complement of this set of flags.",194,{"inputs":[{"name":"extendedfunctioninfoedx"}],"output":{"name":"extendedfunctioninfoedx"}}],[14,"cpuid!","","",null,null]],"paths":[[3,"CpuIdResult"],[3,"CacheInfo"],[3,"ExtendedState"],[4,"CacheInfoType"],[4,"CacheType"],[4,"TopologyType"],[4,"ExtendedStateIdent"],[4,"L2Associativity"],[3,"Wrapping"],[3,"Big32x36"],[3,"Big8x3"],[3,"Decoded"],[4,"FullDecoded"],[3,"Fp"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"NoCopy"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"CpuId"],[3,"VendorInfo"],[3,"CacheInfoIter"],[3,"ProcessorSerial"],[3,"FeatureInfo"],[3,"FeatureInfoEcx"],[3,"FeatureInfoEdx"],[3,"CacheParametersIter"],[3,"CacheParameter"],[3,"MonitorMwaitInfo"],[3,"ThermalPowerInfo"],[3,"ThermalPowerFeaturesEax"],[3,"ThermalPowerFeaturesEcx"],[3,"ExtendedFeatures"],[3,"ExtendedFeaturesEbx"],[3,"DirectCacheAccessInfo"],[3,"PerformanceMonitoringInfo"],[3,"PerformanceMonitoringFeaturesEbx"],[3,"ExtendedTopologyIter"],[3,"ExtendedTopologyLevel"],[3,"ExtendedStateInfo"],[3,"ExtendedStateIter"],[3,"QoSInfo"],[3,"ExtendedFunctionInfo"],[3,"ExtendedFunctionInfoEcx"],[3,"ExtendedFunctionInfoEdx"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
